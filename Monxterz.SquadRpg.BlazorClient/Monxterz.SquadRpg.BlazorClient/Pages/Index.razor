@page "/"
@inject IChangeUserService changeUserService;
@inject IGameStateClient gameStateClient;
@inject IGameTestHarness game;

<PageTitle>Monxterz Squad RPG</PageTitle>

<h1>Hello, @playerName!</h1>

<div class="container">
    <div class="row">
        <div class="col">
            Attacker: @selectedFriendly?.DisplayName @selectedFriendly?.Stats
        </div>
        <div class="col">
            Defender: @selectedEnemy?.DisplayName @selectedEnemy?.Stats
        </div>
    </div>
    <div class="row">
        <div class="col">
            <button type="button" class="btn btn-danger" @onclick="Attack" disabled="@(!CanAttack)">
                Attack!
            </button>
        </div>
    </div>
    <div class="row align-items-top mt-2">
        <div class="col">
            <h3>
                Your Characters
            </h3>
            <div class="list-group">
                @foreach (var character in friendlies)
                {
                    <button type="button" class="list-group-item list-group-item-action @active(character)" @onclick="() => selectedFriendly = character">
                        @character.DisplayName @character.Stats
                    </button>
                }
            </div>
        </div>
        <div class="col">
            <h3>
                Enemies
            </h3>
            <div class="list-group">
                @foreach (var character in enemies)
                {
                    <button type="button" class="list-group-item list-group-item-action @active(character)" @onclick="() => selectedEnemy = character">
                        @character.DisplayName @character.Stats @character.Entity.SystemState.OwnerId
                    </button>
                }
            </div>
        </div>
    </div>
</div>


@code
{
    private string playerName = "...";
    List<CharacterViewModel> friendlies = new();
    List<CharacterViewModel> enemies = new();
    CharacterViewModel? selectedFriendly;
    CharacterViewModel? selectedEnemy;

    bool CanAttack => selectedEnemy is not null && selectedFriendly is not null;

    protected override async Task OnParametersSetAsync()
    {
        await game.InitAsync();

        await changeUserService.ChangeUserAsync("system");
        var user = await gameStateClient.GetUserAsync() ?? throw new Exception("Failed to fetch current user entity");
        playerName = user.DisplayName ?? user.Id ?? "??";

        var allNearbyEntities = await gameStateClient.GetEntitiesNearbyAsync();
        var allNearbyCharacters = allNearbyEntities!.Where(BattleClient.IsCharacter);
        friendlies = ToCharacterViewModels(allNearbyCharacters, e => e.SystemState.OwnerId == user.Id);
        enemies = ToCharacterViewModels(allNearbyCharacters, e => e.SystemState.OwnerId != user.Id);
    }

    private async Task Attack()
    {
        if (selectedFriendly is null || selectedEnemy is null)
            return;
        await game.Call.Attack(selectedFriendly.Entity, selectedEnemy.Entity);
        // HACK: Refresh enemy in view
        var index = enemies.IndexOf(selectedEnemy);
        enemies[index] = selectedEnemy = new CharacterViewModel(selectedEnemy.Entity);
    }

    private List<CharacterViewModel> ToCharacterViewModels(IEnumerable<GameEntityState> entities, Func<GameEntityState, bool> predicate)
    {
        return entities.Where(predicate)
                       .Select(entity => new CharacterViewModel(entity))
                       .ToList();
    }

    string active(CharacterViewModel c)
    {
        return c == selectedEnemy || c == selectedFriendly ? "active" : "";
    }
}
