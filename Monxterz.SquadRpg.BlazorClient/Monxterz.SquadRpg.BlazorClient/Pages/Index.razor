@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager navigationManager;
@inject IChangeUserService changeUserService;
@inject IGameStateClient gameStateClient;
@inject IGameTestHarness game;
@inject IToastService toastService;
@inject ILocalStorageService localStorageService;
@inject INotificationService notificationService
@inject IGameBearerTokenProvider gameTokenProvider;
@inject IConfiguration configuration;
@inject ILogger<Index> logger;

<PageTitle>Monxterz Squad RPG</PageTitle>

<div class="container">
    <div class="row justify-content-between">
        <div class="col">
            <h1>Hello, @playerName!</h1>
        </div>
        <div class="col">
            @if (IsConnected)
            {
                <span class="badge rounded-pill bg-success float-end" title="Connected">
                    <span class="oi oi-audio"></span>
                </span>
            }
            else
            {
                <span class="badge rounded-pill bg-danger float-end" title="Not Connected">
                    <span class="oi oi-ban"></span>
                </span>
            }
        </div>
    </div>
    <div class="row">
        <div class="col">
            Attacker:
            @if (selectedFriendly is not null)
            {
                <a href="" @onclick="ShowRenameDialog">
                    @selectedFriendly.DisplayName
                </a>
                <span class="mx-1">
                    @selectedFriendly.Stats
                </span>
                <button class="btn btn-outline-secondary btn-sm" title="Strength Training" @onclick="StartTraining" disabled="@(!CanTrain)">
                    <span class="oi oi-expand-up"></span>
                </button>
                <button class="btn btn-outline-secondary btn-sm" title="Refresh Status" @onclick="() => CheckStatus(selectedFriendly)">
                    <span class="oi oi-loop-circular"></span>
                </button>
                @if (selectedFriendly.ShowSpinner)
                {
                    <div class="spinner-grow spinner-grow-sm float-end" role="status"></div>
                }
            }
        </div>
        <div class="col">
            Defender: <CharacterText Character="@selectedEnemy" />
        </div>
    </div>
    <div class="row">
        <div class="col">
            <button type="button" class="btn btn-danger" @onclick="Attack" disabled="@(!CanAttack)">
                Attack!
            </button>
        </div>
    </div>
    <div class="row align-items-top mt-2">
        <div class="col">
            <h3>
                Your Characters
                <button type="button" class="btn btn-success" title="New Character" @onclick="NewCharacter">
                    <span class="oi oi-plus"></span>
                </button>
            </h3>
            <div class="list-group">
                @foreach (var character in friendlies)
                {
                    <button type="button" class="list-group-item list-group-item-action @active(character)" @onclick="() => selectedFriendly = character">
                        <CharacterText Character="@character" />
                    </button>
                }
            </div>
        </div>
        <div class="col">
            <h3>
                Enemies
            </h3>
            <div class="list-group">
                @foreach (var character in enemies)
                {
                    <button type="button" class="list-group-item list-group-item-action @active(character)" @onclick="() => selectedEnemy = character">
                        <CharacterText Character="@character" ShowOwner="true" />
                    </button>
                }
            </div>
        </div>
    </div>
</div>

@if (showRenameDialog)
{
    <Dialog Title="Rename a Character" Message="New Character Name" OnClose="CloseRenameDialog" Text="@selectedFriendly?.DisplayName" OnSave="RenameCharacter" />
}
<BlazoredToasts Position="ToastPosition.TopRight"
                Timeout="10"
                RemoveToastsOnNavigation="true"
                ShowProgressBar="true" />

@code
{
    private HubConnection? hubConnection;
    const int TrainingTime = 10;
    const int RecoveryTime = 10 + 1; // Happens to match what is in Attack.js
    private string playerName = "...";
    GameEntityState? user;
    List<CharacterViewModel> friendlies = new();
    List<CharacterViewModel> enemies = new();
    CharacterViewModel? selectedFriendly;
    CharacterViewModel? selectedEnemy;
    Dictionary<string, GameEntityState> entityCache = new();

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    bool CanTrain => selectedFriendly is not null
                     && !selectedFriendly.IsTraining
                     && !selectedFriendly.IsRecovering;

    bool CanAttack => selectedEnemy is not null
                      && selectedFriendly is not null
                      && !selectedFriendly.IsTraining
                      && !selectedFriendly.IsRecovering;

    protected override async Task OnInitializedAsync()
    {
        var token = await localStorageService.GetItemAsync<string>("Token");
        var userId = await localStorageService.GetItemAsync<string>("UserID");
        // TODO: Break direct dependence on IGameBearerTokenProvider
        gameTokenProvider.SetBearerToken(userId, token);
        // Connect to Change Notifications service
        var notificationsUrl = configuration["NotificationsUrl"];
        if (notificationsUrl is null)
        {
            logger.LogError("Config['NotificationsUrl'] is missing. Notifications will not work.");
            return;
        }
        hubConnection = new HubConnectionBuilder()
            .WithUrl(notificationsUrl)
            .Build();
        hubConnection.On<string>("ReceiveNotification", RefreshEntity);
        await hubConnection.StartAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (changeUserService.CurrentUserId is null)
            navigationManager.NavigateTo("/login");
        else
        {
            await game.InitAsync();

            user = await gameStateClient.GetUserAsync() ?? throw new Exception("Failed to fetch current user entity");
            playerName = user.DisplayName ?? user.Id ?? "??";

            var allNearbyEntities = await gameStateClient.GetEntitiesNearbyAsync();
            entityCache = allNearbyEntities.ToDictionary(e => e.Id!);
            var allNearbyCharacters = allNearbyEntities!.Where(BattleClient.IsCharacter);
            friendlies = ToCharacterViewModels(allNearbyCharacters, e => e.SystemState.OwnerId == user.Id);
            enemies = ToCharacterViewModels(allNearbyCharacters, e => e.SystemState.OwnerId != user.Id);

            // HACK: Check training for any friendlies that are traning when the page loads
            Task.Delay(TrainingTime * 1000).ContinueWith(_ =>
            {
                foreach (var friendly in friendlies)
                {
                    if (friendly.ShowSpinner)
                        CheckStatus(friendly);
                }
            });
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Request permission to show OS notifications
            if (await notificationService.IsSupportedByBrowserAsync())
                await notificationService.RequestPermissionAsync();
        }
    }

    private GameEntityState? LookupEntity(string? id) 
    {
        if (id is null) 
            return null;
        return entityCache.GetValueOrDefault(id);
    }

    private async Task NewCharacter()
    {
        try
        {
            GameEntityState character = await game.Create.Character();
            friendlies.Insert(0, new CharacterViewModel(character, LookupEntity));
        }
        catch (ApiException apiException)
        {
            ShowError(apiException);
        }
    }

    private async Task Attack()
    {
        if (selectedFriendly is null || selectedEnemy is null)
            return;
        try
        {
            await game.Call.Attack(selectedFriendly.Entity, selectedEnemy.Entity);
            // HACK: Refresh enemy in view
            var index = enemies.IndexOf(selectedEnemy);
            enemies[index] = selectedEnemy = new CharacterViewModel(selectedEnemy.Entity, LookupEntity);
            // HACK: Background task to check recovery after it is completed
            Task.Delay(RecoveryTime * 1000).ContinueWith(_ => CheckStatus(selectedFriendly));
        }
        catch (ApiException apiException)
        {
            ShowError(apiException);
        }
    }

    private List<CharacterViewModel> ToCharacterViewModels(IEnumerable<GameEntityState> entities, Func<GameEntityState, bool> predicate)
    {
        // Reversed so youngest first
        return entities.Where(predicate)
                       .Select(entity => new CharacterViewModel(entity, LookupEntity))
                       .Reverse()
                       .ToList();
    }

    string active(CharacterViewModel c)
    {
        return c == selectedEnemy || c == selectedFriendly ? "active" : "";
    }

    bool showRenameDialog = false;
    void CloseRenameDialog() => showRenameDialog = false;
    void ShowRenameDialog() => showRenameDialog = true;

    async Task RenameCharacter(string newDisplayName)
    {
        try
        {
            var updatedEntity = await gameStateClient.PutEntityDisplayNameAsync(selectedFriendly.Entity.Id, newDisplayName);
            selectedFriendly.Entity = updatedEntity;
        }
        catch (ApiException apiException)
        {
            ShowError(apiException);
        }
    }

    async Task StartTraining()
    {
        try
        {
            var character = selectedFriendly!;
            await game.Call.Train(character.Entity, "strength", TrainingTime);
            // HACK: Background task to check training after it is completed
            Task.Delay(TrainingTime * 1000).ContinueWith(_ => CheckStatus(character));
        }
        catch (ApiException apiException)
        {
            ShowError(apiException);
        }
    }

    async Task CheckStatus(CharacterViewModel character)
    {
        try
        {
            await game.Call.CheckStatus(character.Entity);
            base.StateHasChanged();
        }
        catch (ApiException apiException)
        {
            ShowError(apiException);
        }
    }

    async Task RefreshEntity(string entityId)
    {
        // TODO: Perf: don't need to fetch the entity if we initiated the action and already have the latest
        var entity = await this.gameStateClient.GetEntityAsync(entityId);
        // If the entity has been deleted, do nothing... We don't support that yet...
        if (entity?.Id is null)
            return;
        // Update local cache entry (applies to users and characters)
        entityCache[entity.Id] = entity;
        // Ignore updates that aren't to game characters
        if (!BattleClient.IsCharacter(entity))
            return;
        // Can't handle if the user is not valid
        if (user is null)
            return;
        var isFriendly = entity.SystemState.OwnerId == user.Id;
        var characterViewModels = isFriendly ? friendlies : enemies;
        var characterViewModel = characterViewModels.FirstOrDefault(cvm => cvm.Id == entityId);
        // If not found, we have a new one
        if (characterViewModel is null)
        {
            characterViewModels.Insert(0, new CharacterViewModel(entity, LookupEntity));
        }
        else
        {
            if (isFriendly)
            {
                // Notify if we were attacked
                var initialHp = characterViewModel.Hp;
                characterViewModel.Entity = entity;
                var newHp = characterViewModel.Hp;
                if (newHp < initialHp)
                {
                    var defender = characterViewModel.DisplayName;
                    var attacker = characterViewModel.AttackedBy;
                    var act = newHp == 0 ? "killed" : "attacked";
                    var message = $"{defender} was {act} by {attacker}!";
                    toastService.ShowWarning(message);
                    await notificationService.CreateAsync("You were attacked!", message);
                }
            }
            else
            {
                characterViewModel.Entity = entity;
            }
        }
        base.StateHasChanged();
    }

    private void ShowError(ApiException apiException)
    {
        toastService.ShowError(apiException.SimpleMessage());
    }
}
