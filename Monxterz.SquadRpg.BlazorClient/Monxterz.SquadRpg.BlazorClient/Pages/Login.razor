@page "/login"
@inject IChangeUserService changeUserService;
@inject NavigationManager navigationManager;

<h3>Login</h3>

<form @onsubmit="LoginUser">
    <div class="mb-3">
        <label for="inputUserId" class="form-label">
            User ID
        </label>
        <div class="input-group has-validation">
            @*<span class="input-group-text" id="inputGroupPrepend3">@@</span>*@
            <input type="text" class="form-control @isInvalid()" id="inputUserId" @bind="userId" required>
            <div id="inputUserIdFeedback" class="invalid-feedback">
                @errorMessage
            </div>
        </div>
    </div>
    <button type="button" class="btn btn-primary" @onclick="LoginUser">
        Login
    </button>
</form>

@code {
    string? userId;
    string? errorMessage;

    async Task LoginUser()
    {
        errorMessage = null;
        try
        {
            await changeUserService.ChangeUserAsync(userId);
            navigationManager.NavigateTo("/");
        }
        catch (ApiException apiException)
        {
            // Response has the complete the server-side exception message (including call stack)
            errorMessage = apiException.Response ?? apiException.Message;
        }
    }

    // https://getbootstrap.com/docs/5.0/forms/validation/#server-side
    string isInvalid() => errorMessage is not null ? "is-invalid" : "";
}
